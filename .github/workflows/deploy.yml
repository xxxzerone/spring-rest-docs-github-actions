name: Deploy to EC2

on:
  release:
    types: [published]
  push:
    branches:
      - dev

env:
  AWS_REGION: 'ap-northeast-2'
  DOCKER_HUB_REGISTRY: 'testxxboy/actions-test'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    steps:
      - name: Git clone
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission
        run: chmod +x ./gradlew

      - name: Run clean gradle
        run: ./gradlew clean

      - name: Run build gradle
        run: ./gradlew -Pprod build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract version from tag
        id: extract_version
        run: |
          FILENAME=$(basename build/libs/demo-*.jar)
          VERSION=$(echo "$FILENAME" | sed -E 's/demo-([0-9.]+)\.jar/\1/')
          echo "Extracted version: $VERSION"
          echo "version=v$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        id: push_image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: testxxboy/actions-test:${{ steps.extract_version.outputs.version }}
          labels: version=${{ steps.extract_version.outputs.version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Connect to EC2 & Execute Application
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_SSH_PORT }}
          envs: DOCKER_IMAGE
          script: |
            DOCKER_IMAGE=${{ env.DOCKER_HUB_REGISTRY }}:${{ steps.extract_version.outputs.version }}
            docker stop $(docker ps -a -q) 
            docker rm $(docker ps -a -q) 
            docker pull $DOCKER_IMAGE
            docker run -d --name pinup $DOCKER_IMAGE
