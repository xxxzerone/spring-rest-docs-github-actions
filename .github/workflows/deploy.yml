name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone
        uses: actions/checkout@v4

      - name: Start LocalStack
        uses: LocalStack/setup-localstack@v0.2.4
        with:
          image-tag: 'latest'
          install-awslocal: 'true'
          configuration: DEBUG=1
        env:
          ACTIVATE_PRO: 0
          LOCALSTACK_API_KEY: 'test'

      - name: Run Tests against LocalStack
        run: |
          awslocal s3 mb s3://pinup
          awslocal s3 ls
          echo "Test Execution complete!"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: gradle

      - name: Grant execute permission
        run: chmod +x ./gradlew

      - name: Run Build
        run: ./gradlew clean -Pprod build

      # 파일을 업로드하여 나중에 다운로드에 사용되도록 한다.
      # Artifact를 통해 작업을 완료한 후 데이터를 보관하고 동일한 Workflow의 다른 작업에서 공유할 수 있다.
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: Project
          # 업로드할 파일의 경로를 지정 (build/libs에 Project jar 파일을 업로드한다.)
          # 빌드 단계에서 생성된 jar파일
          path: build/libs/Project-0.0.1-SNAPSHOT.jar

  deploy:
    # needs 키워드는 현재 작업이 의존하는 이전 작업을 지정한다.
    # 즉, build 작업이 성공적으로 완료된 후에만 이 작업이 실행된다.
    needs: build
    # Ubuntu 환경에서 실행 (Github Actions에서 제공하는 기본 실행 중 하나)
    runs-on: ubuntu-latest
    # Github 이벤트가 push일 때만 작업을 실행
    if: github.event_name == 'push'
    steps:
      # CI 단계에서 업로드한 artifact를 다운로드 한다.
      # CI 단계에서 artifact를 업로드했으면 그냥 그거 쓰면 되는거 아닌가?
      # -> CI에서 생성된 artifact를 CD단계에서 동일한 artifact를 사용하여 배포의 일관성을 유지
      # -> CI에서 생성된 결과물을 바로 사용하기때문에 시간 절약
      # -> CI에서 검증한 코드를 CD에서 사용하므로 배포 안정성 높일 수 있음
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          # Project 이름으로 업로드된 artifact를 build/libs 경로에 다운로드
          name: Project
          path: build/libs/

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Get latest Tag
        id: latest-tags
        run: |
          git fetch -a
          echo "LATEST_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))" >> $GITHUB_ENV
      - name: Build and deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo $LATEST_TAG
          REPO_NAME=$(echo $GITHUB_REPOSITORY | awk -F / '{print $2}')
          docker build --build-arg VERSION=$LATEST_TAG -t $ECR_REGISTRY/$REPO_NAME:$GITHUB_SHA -t $ECR_REGISTRY/$REPO_NAME:latest .
          docker push -a $ECR_REGISTRY/$REPO_NAME
          aws ecs update-service --cluster example --service $REPO_NAME --task-definition $REPO_NAME --force-new-deployment
